// the following variables affect what is displayed on the output
// these values can also be set/changed inbetween test definitions
debug = false
show.settings = true
show.cookies = false
show.headers = false
show.config = false
show.data = false

// the following variables affect how the sessions/calls are setup
defaults.resetSession = false
defaults.addReferer = false
defaults.expectedStatus = 200
defaults.headers.'User-Agent' = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)'
defaults.followRedirects = false
defaults.localAddress = null
defaults.proxy = null

// you can define your own variables; these are standard 'groovy' expressions, 
// each line is evaluated independently;  
// you can use args[#] to obtain command line arguments
my_host='www.google.com'
data='value'
counter=0

// comments can be made by starting a line with // or ; 
// comments must be on their own line
// starting a line with # is reserved for future use... #include, etc.

showHeaders=true

This is the test name, it can be anything w/o and equals sign
{
  // your 'test' definition goes here
  
  // note that you can use standard 'groovy' ${} embedded expressions 
  // anywhere within this test definition
  
  // here is the definition of a cookie, you may define them anyway you want
  // but standard rules will be followed by HttpClient in determining 
  // which cookies get passed with a call
  Cookie: name=COOKIENAME; value=VALUE; domain=${my_host}; path=/
  
  // after setting up cookies the 'call' MUST be setup next before anything else
  // only one call may be setup per test; it can be either a 'Get' or a 'Post'
  Get: http://${my_host}/no_such_file
  
  // next, the call can be customized by setting various attributes
  // these can be specified in any order but must come after the Get:/Post:
  
  // add headers...
  Header: MyCustomHeader=header value data goes here
  Header: MyOtherCustomHeader=another header value data goes here
  
  // set whether 301/302/etc redirects should be followed internally 
  FollowRedirects: true
  
  // if you have multiple local ip address and you want to make the call
  // from a specific address then set it using 'LocalAddress'
  ;LocalAddress: 192.168.1.1
  
  // a proxy can be defined if need be
  Proxy: proxy.mtus.mtnet:8080
  
  // the resulting data can be saved to a file 
  ;SaveData: filename-${++counter}.txt
  
  // lastly, set what the expected results are to determine if the 
  // test passed or failed;  by default there is an ExpectedStatus of 200
  
  // expected status is just a simple number
  ExpectedStatus: 404
  
  // expected header is defined with a name-value pair where the value is 
  // a regex expression
  ExpectedHeader: Server=GWS.*
  
  // for expected cookies you can check the name and value (not domain or path)
  // again, the value is a regex expression
  ;ExpectedCookie: ID=.*
  
  // for expected data just specify some text and if that text appears anywhere
  // in the result then this test passes.  the text is NOT a regex
  ExpectedData: <html>
}

// between tests you can capture the results and setup more variables

// session is an org.apache.commons.httpclient.HttpClient... 
// if alwaysResetSession is true a new one is created for each test 
// otherwise the same session is used (allowing cookies to stick around)
x=session

// test.call is an org.apache.commons.httpclient.HttpMethod 
// (either GetMethod or PostMethod depending on the test definition)
x=test.call

// test.url is a string of the complete url from the previous test;
// it is used as the Referer when alwaysAddReferer is true
x=test.url

// test.cookies is a hash where the key is the cookie name and the 
// value is an org.apache.commons.httpclient.Cookie
x=test.cookies

// status is the http status result code from the last call 
// (200, 301, 404, 500, etc)
x=test.status

// statusLine is the full http response line; for example "HTTP/1.1 200 OK"
x=test.statusLine

// headers is a hash where the key is the response header name and 
// the value is the value of the named header
// ...this is useful for manually following redirects:
//   next_url=headers['Location']
// then on the next test... "Get: ${next_url}"
x=test.headers

// data is the full text of the response data
x=test.data

// test.errors is a list or error messages from the "Expected..." tests that failed
x=test.errors


-Test names that start with a dash are not executed
{
}


?Test names that start with a question mark execute if the previous test passed
{
  // tests can be defined as "Post"s instead of "Get"s
  Post: http://${my_host}/post_some_data
  Proxy: proxy.mtus.mtnet:8080
  ExpectedStatus: 501
  
  // for Posts you specify parameters, similar to the way Headers are specified
  Parameter: x=${data}
  Parameter: y=more data
}

#{{{
  // this is just a block of 'groovy' code; it does not have a test name
  // associated with it.  everything up to the closing brace is 'evaluate'd
  // at once
  println "Groovy scripting is fun\nLast call was to: ${test.url}"
  
  // this is a good place to put code if you need to manipulate/check the 
  // response data, etc.
}}}
